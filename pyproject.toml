[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "bluetooth-sig"
version = "0.3.0"
authors = [{ name = "RonanB96", email = "RonanB96@users.noreply.github.com" }]
maintainers = [
    { name = "RonanB96", email = "RonanB96@users.noreply.github.com" },
]
description = "Pure Bluetooth SIG standards library for characteristic and service interpretation"
readme = "README.md"
license = { text = "MIT" }
requires-python = ">=3.9"
keywords = ["bluetooth", "bluetooth-sig", "gatt", "standards"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications",
    "Topic :: Software Development :: Libraries",
]
dependencies = [
    "pyyaml~=6.0.0",
]

[project.urls]
bugs = "https://github.com/RonanB96/bluetooth_sig_python/issues"
changelog = "https://github.com/RonanB96/bluetooth_sig_python/blob/master/changelog.md"
homepage = "https://github.com/RonanB96/bluetooth_sig_python"

[project.optional-dependencies]
dev = [
    "pytest~=8.4",
    "pytest-asyncio~=1.1",
    "pytest-cov~=6.2",
    "pylint~=3.3",
    "ruff~=0.1",
    "ipdb~=0.13",
    "coverage~=7.0",
]
test = [
    "pytest==8.4.2",
    "pytest-asyncio==1.1.0",
    "pytest-cov==6.3.0",
]
examples = [
    # BLE libraries for example integrations
    "bleak>=0.21.0",                    # Cross-platform async BLE (recommended)
    "bleak-retry-connector>=3.5.0",    # Robust BLE with retry logic
    "simplepyble>=0.10.0",             # Cross-platform BLE (requires commercial license for commercial use)
]

[project.scripts]
# Note: No CLI scripts for this library package
# bluetooth_sig_python = "bluetooth_sig_python.cli:app"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]

[tool.hatch.build]
exclude = ["tests/*", "scripts/*"]

[tool.hatch.build.targets.wheel]
packages = ["src/bluetooth_sig"]

[tool.hatch.build.targets.wheel.sources]
"bluetooth_sig" = "bluetooth_sig"

[tool.pylint.MAIN]
source-roots = ["src"]
ignore = ["CVS", ".git", "__pycache__", ".venv"]
ignore-paths = ["^.git/.*$", "^.venv/.*$"]
persistent = true
jobs = 0
output-format = "colorized"
msg-template = "{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}"

[tool.pylint.FORMAT]
# Line length is handled by Black - DO NOT SET max-line-length
# This section intentionally left without line length constraints

[tool.pylint.MESSAGE_CONTROL]
# Only globally disable issues that are handled by other tools or are project-wide
disable = [
    "C0103", # invalid-name (Black handles this globally)
    "C0301", # line-too-long (Black handles this globally) - IGNORE LINE LENGTH
    "W0311", # bad-indentation (Black handles this globally)
    "W0511", # fixme (TODO comments are useful throughout)
    "C0411", # wrong-import-order (handled by isort/Black globally)
    "C0412", # ungrouped-imports (handled by isort/Black globally)
    "C0413", # wrong-import-position (handled by isort/Black globally)
    "E0611", # no-name-in-module (editable install issue affects entire project)
    "R0801", # duplicate-code (BLE protocol patterns have legitimate code duplication)
]

# Note: Other issues like broad-exception-caught, too-few-public-methods,
# no-member, redefined-outer-name are now handled with targeted inline
# disables in specific files where they're needed.

[tool.pylint.BASIC]
good-names = ["id", "i", "j", "k", "ex", "Run", "_", "fp", "e"]

[tool.ruff]
line-length = 88
target-version = "py39"
exclude = [".git", "__pycache__", "build", "dist", ".venv", ".eggs"]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "UP",  # pyupgrade
]
ignore = [
    "E203", # Whitespace before ':' - conflicts with black
    "E501", # Line too long - handled by formatter
    "E701", # Multiple statements on one line (colon)
    "E702", # Multiple statements on one line (semicolon)
    "N802", # Function name should be lowercase (our UUID properties use CAPS)
    "C901", # Function is too complex (we have some complex parsing functions)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # Ignore unused imports in __init__.py files

[tool.ruff.format]
# Use black-compatible formatting
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["bluetooth_sig"]
force-single-line = false

[tool.uv]
package = true
