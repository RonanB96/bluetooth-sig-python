name: Test and Coverage

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
    strategy:
      matrix:
        python-version: ["3.9", "3.12"]

    steps:
    - uses: actions/checkout@v5
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v6
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'

    - name: Cache system dependencies
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('scripts/install-deps.sh') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build pkg-config libdbus-1-dev libglib2.0-dev libudev-dev python3-dev

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .[dev,test,examples]

    - name: Run tests with coverage
      run: |
        python -m pytest tests/ -n auto --cov=src/bluetooth_sig --cov-report=html --cov-report=xml --cov-report=term-missing --cov-fail-under=70

    - name: Extract coverage percentage and create badge
      if: matrix.python-version == '3.12'
      run: |
        python scripts/extract_coverage_badge.py

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          htmlcov/
        retention-days: 30

    - name: Upload coverage artifacts
      if: matrix.python-version == '3.12'
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov
        retention-days: 30

  build-docs:
    name: Build Documentation
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'pyproject.toml'

      - name: Install documentation dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[docs]"

      - name: Cache system dependencies
        uses: actions/cache@v4
        with:
          path: /var/cache/apt
          key: ${{ runner.os }}-apt-${{ hashFiles('scripts/install-deps.sh') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Install system packages required for UML generation
        run: |
          # PlantUML requires Java; pydeps uses Graphviz (dot) to render
          # dependency graphs. Install both so docs generation is reliable.
          sudo apt-get update
          sudo apt-get install -y graphviz plantuml openjdk-11-jre-headless


      - name: Download coverage artifacts
        uses: actions/download-artifact@v5
        with:
          name: coverage-report
          path: htmlcov
        continue-on-error: true

      - name: Link coverage into docs directory
        run: |
          if [ -d "htmlcov" ]; then
            echo "✅ Coverage reports found, linking to docs/"
            rm -f docs/coverage
            ln -sf ../htmlcov docs/coverage
            ls -la docs/coverage | head -3
          else
            echo "⚠️  No coverage reports found, docs will build without coverage"
          fi

      - name: Build documentation
        run: |
          mkdocs build

      - name: Upload combined site artifact (main branch only)
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: site/
          retention-days: 30

  deploy:
    name: Deploy to GitHub Pages
    needs: build-docs
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download site artifacts
        uses: actions/download-artifact@v5
        with:
          name: site
          path: site

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v4
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
