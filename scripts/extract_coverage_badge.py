#!/usr/bin/env python3
"""
Extract coverage percentage from coverage.xml and create a coverage badge JSON file.

This script parses the coverage.xml file generated by pytest-cov and creates
a JSON file compatible with shields.io endpoint badges for GitHub Pages deployment.
"""

import xml.etree.ElementTree as ET
import json
import os
import sys
from pathlib import Path


def extract_coverage_percentage(coverage_xml_path: str) -> float:
    """
    Extract coverage percentage from coverage.xml file.
    
    Args:
        coverage_xml_path: Path to the coverage.xml file
        
    Returns:
        Coverage percentage as a float
        
    Raises:
        FileNotFoundError: If coverage.xml file doesn't exist
        ET.ParseError: If coverage.xml file is malformed
    """
    if not os.path.exists(coverage_xml_path):
        raise FileNotFoundError(f"Coverage file not found: {coverage_xml_path}")
    
    tree = ET.parse(coverage_xml_path)
    root = tree.getroot()
    
    # Get line coverage percentage from the root element
    line_rate = float(root.attrib['line-rate'])
    coverage_pct = round(line_rate * 100, 1)
    
    return coverage_pct


def get_coverage_color(coverage_pct: float) -> str:
    """
    Determine badge color based on coverage percentage.
    
    Args:
        coverage_pct: Coverage percentage as a float
        
    Returns:
        Color string for shields.io badge
    """
    if coverage_pct >= 80:
        return "brightgreen"
    elif coverage_pct >= 60:
        return "yellow"
    else:
        return "red"


def create_coverage_badge_json(coverage_pct: float, output_dir: str) -> str:
    """
    Create coverage badge JSON file for shields.io endpoint.
    
    Args:
        coverage_pct: Coverage percentage as a float
        output_dir: Directory to save the badge JSON file
        
    Returns:
        Path to the created badge JSON file
    """
    color = get_coverage_color(coverage_pct)
    
    badge_data = {
        "schemaVersion": 1,
        "label": "coverage",
        "message": f"{coverage_pct}%",
        "color": color
    }
    
    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)
    
    # Write badge JSON file
    badge_path = os.path.join(output_dir, 'coverage-badge.json')
    with open(badge_path, 'w') as f:
        json.dump(badge_data, f, indent=2)
    
    return badge_path


def main():
    """Main function to extract coverage and create badge JSON."""
    # Default paths
    coverage_xml_path = 'coverage.xml'
    output_dir = 'htmlcov'
    
    # Allow override of paths via command line arguments
    if len(sys.argv) > 1:
        coverage_xml_path = sys.argv[1]
    if len(sys.argv) > 2:
        output_dir = sys.argv[2]
    
    try:
        # Extract coverage percentage
        coverage_pct = extract_coverage_percentage(coverage_xml_path)
        
        # Create badge JSON file
        badge_path = create_coverage_badge_json(coverage_pct, output_dir)
        
        # Print results
        color = get_coverage_color(coverage_pct)
        print(f"Coverage: {coverage_pct}% (color: {color})")
        print(f"Badge JSON created: {badge_path}")
        
    except FileNotFoundError as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)
    except ET.ParseError as e:
        print(f"Error parsing coverage.xml: {e}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"Unexpected error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()